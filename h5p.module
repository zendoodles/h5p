<?php

/**
 * @file
 *  h5p.module php file
 *  Drupal module h5p. A HTML5 Package manager for Drupal.
 */

/**
 * Implementation of hook_autoload_info().
 */
function h5p_autoload_info() {
  return array(
    'H5PDrupal' => array(
      'file' => 'h5p.classes.inc',
    ),
    'H5PCore' => array(
      'file' => 'library/h5p.classes.php',
    ),
    'H5PFrameworkInterface' => array(
      'file' => 'library/h5p.classes.php',
    ),
    'H5PStorage' => array(
      'file' => 'library/h5p.classes.php',
    ),
    'H5PValidator' => array(
      'file' => 'library/h5p.classes.php',
    ),
    'H5PDevelopment' => array(
      'file' => 'library/h5p-development.class.php',
    ),
  );
}

/**
 * Implements hook_init()
 */
function h5p_init() {
  if (arg(0) == 'admin' && empty($_POST) && user_access('access administration pages')) {
    $core = _h5p_get_instance('core');
    $core->validateLibrarySupport();
    _h5p_display_unsupported_libraries(arg(2) === 'h5p');
  }
}

/**
 * Implements hook_menu().
 */
function h5p_menu() {
  $items = array();
  $items['admin/settings/h5p'] = array(
    'title' => 'H5P',
    'description' => 'Configure the location of h5p files.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('h5p_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'h5p.admin.inc',
  );
  $items['admin/content/h5p/libraries'] = array(
    'title' => 'H5P Libraries',
    'description' => 'List, delete and get detailed info on the installed H5P libraries',
    'page callback' => 'h5p_library_list',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'h5p.admin.inc',
  );
  $items['admin/content/h5p/libraries/%'] = array(
    'title' => 'H5P Library Details',
    'title callback' => '_h5p_library_details_title',
    'title arguments' => array(4),
    'description' => 'Get detailedÂ info on a library',
    'page callback' => 'h5p_library_details',
    'page arguments' => array(4),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'h5p.admin.inc',
  );
  $items['admin/content/h5p/libraries/%/upgrade'] = array(
    'title' => 'Upgrade H5P Content',
    'page callback' => 'h5p_content_upgrade',
    'page arguments' => array(4),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'h5p.admin.inc',
  );
  $items['admin/content/h5p/libraries/%/delete'] = array(
    'title' => 'Delete H5P Library',
    'description' => 'Delete an unused H5P library',
    'page callback' => 'h5p_library_delete',
    'page arguments' => array(4),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'h5p.admin.inc',
  );
  $items['admin/content/h5p/upgrade-library/%/%/%'] = array(
    'title' => 'H5P Content Upgrade Library',
    'page callback' => 'h5p_content_upgrade_library',
    'page arguments' => array(4, 5, 6),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'h5p.admin.inc',
  );
  $items['admin/content/h5p/libraries/upgrade-all'] = array(
    'title' => 'Upgrade All H5P Libraries',
    'page callback' => 'h5p_upgrade_all_libraries',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'h5p.admin.inc',
  );
  $items['admin/content/h5p/rebuild-cache'] = array(
    'title' => 'H5P Rebuild Content Cache',
    'page callback' => 'h5p_rebuild_cache',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'h5p.admin.inc',
  );

  $items['h5p/embed'] = array(
    'title' => 'H5P Embed',
    'page callback' => 'h5p_embed',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // TODO: Should we stick to url conventions? http://moz.com/blog/11-best-practices-for-urls
  // If we want to hint on return type we should call this //h5p/set-finished.json
  $items['h5p-ajax/setFinished'] = array(
    'page callback' => 'h5p_set_finished',
    'access callback' => 'h5p_access_set_finished',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Make URLs absolute.
 *
 * @param array $urls
 * @param array $remove Optional urls to skip.
 * @return array absolute urls.
 */
function _h5p_make_urls_absolute($urls, $remove = NULL) {
  global $base_url;
  for ($i = 0, $s = count($urls); $i < $s; $i++) {
    if ($remove !== NULL && preg_match($remove, $urls[$i])) {
      array_splice($urls, $i, 1);
      $i--;
      $s--;
      continue;
    }

    // Skip URLs who already have a base, like aggregated assets.
    if (substr($urls[$i], 0, strlen($base_url)) !== $base_url) {
      $urls[$i] =  $base_url . '/' . $urls[$i];
    }
  }
  return $urls;
}

/**
 * Get path to HTML5 Package.
 *
 * @param int $content_id
 * @return string
 */
function h5p_get_export_path($content_id) {
  return variable_get('h5p_export', 1) ? file_create_url(_h5p_get_h5p_path() . '/exports/' . $content_id . '.h5p') : '';
}

/**
 * Generate embed page to be included in iframe.
 */
function h5p_embed($node) {
  global $language;

  $callback = filter_input(INPUT_GET, 'callback');
  if ($callback !== NULL) {

    // Old embed code only returns resizer url
    print $callback . '(\'' . h5p_get_resize_url() . '\');';
    return;
  }

  $node = node_load($node);
  if (!$node || !node_access('view', $node) || !isset($node->json_content)) {
    print '<body style="margin:0"><div style="background: #fafafa url(http://h5p.org/sites/all/themes/professional_themec/images/h5p.svg) no-repeat center;background-size: 50% 50%;width: 100%;height: 100%;"></div><div style="width:100%;position:absolute;top:75%;text-align:center;color:#434343;font-family: Consolas,monaco,monospace">' . t('Content unavailable.') . '</div></body>';
    return;
  }

  $cache_buster = '?' . variable_get('css_js_query_string', '');

  // Get core settings
  $settings = h5p_get_core_settings();
  // TODO: The non-content specific settings could be apart of a combined
  // h5p-core.js file to avoid sending the same data multiple times.

  $module_path = base_path() . drupal_get_path('module', 'h5p');

  // Get core scripts
  $scripts = array();
  foreach (H5PCore::$scripts as $script) {
    $scripts[] = $module_path . '/library/' . $script . $cache_buster;
  }

  // Get core styles
  $styles = array();
  foreach (H5PCore::$styles as $style) {
    $styles[] = $module_path . '/library/' . $style . $cache_buster;
  }

  // Get integration object
  $integration = h5p_get_core_settings();

  // Get content object
  $content = h5p_get_content($node);

  // Add content to integration
  $integration['contents']['cid-' . $content['id']] = h5p_get_content_settings($content);

  // Get content assets
  $core = _h5p_get_instance('core');
  $preloaded_dependencies = $core->loadContentDependencies($content['id'], 'preloaded');
  $files = $core->getDependenciesFiles($preloaded_dependencies, _h5p_get_h5p_path());
  $library_list = _h5p_dependencies_to_library_list($preloaded_dependencies);

  $mode = 'external';
  drupal_alter('h5p_scripts', $files['scripts'], $library_list, $mode);
  drupal_alter('h5p_styles', $files['styles'], $library_list, $mode);

  $scripts = array_merge($scripts, $core->getAssetsUrls($files['scripts']));
  $styles = array_merge($styles, $core->getAssetsUrls($files['styles']));

  $lang = $language->language;
  include('library/embed.php');
}

/**
 * Generate embed code for a given node
 *
 * @param integer $nid
 * @return string
 */
function _h5p_generate_embed_code($nid) {
  global $base_url;
  $module_path = drupal_get_path('module', 'h5p');
  $embed_js_url = $base_url . '/' . $module_path . '/library/js/h5p-embed.js';
  $data_url = url('h5p/embed/' . $nid, array('absolute' => TRUE));

  return '<script src="' . $embed_js_url .'" data-h5p="' . $data_url . '" async></script>';
}

/**
 * Creates the title for the library details page
 *
 * @param integer $library_id
 */
function _h5p_library_details_title($library_id) {
  return db_result(db_query('SELECT title FROM {h5p_libraries} where library_id = %d', $library_id));
}

/**
 * Implements of hook_node_info().
 */
function h5p_node_info() {
  return array(
    'h5p_content' => array(
      'name' => t('Interactive content'),
      'module' => 'h5p',
      'description' => 'Upload HTML5 packages(.h5p) to create interactive content.',
    )
  );
}

/**
 * Implements hook_perm().
 */
function h5p_perm() {
  return array('create h5p', 'edit own h5p', 'edit any h5p', 'delete own h5p', 'delete any h5p', 'update h5p libraries', 'access all h5p results', 'access own h5p results', 'access h5p results for own content');
}

/**
 * Implements hook_access().
 */
function h5p_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      if (user_access('create h5p', $account)) {
        return TRUE;
      }
      break;

    case 'update':
      if (user_access('edit any h5p', $account) || ($account->uid == $node->uid && user_access('edit own h5p', $account))) {
        return TRUE;
      }
      break;

    case 'delete':
      if (user_access('delete any h5p', $account) || ($account->uid == $node->uid && user_access('delete own h5p', $account))) {
        return TRUE;
      }
      break;
  }
}

/**
 * Implements hook_form().
 */
function h5p_form(&$node, $form_state) {
  _h5p_check_settings();

  _h5p_maintain_session_variables();

  $type = node_get_types('type', $node);

  $form['#validate'][] = 'h5p_form_validate';

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
  );

  $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);

  $form['#attributes'] = array('enctype' => "multipart/form-data");

  $form['h5p'] = array(
    '#type' => 'file',
    '#title' => t('HTML 5 Package'),
    '#description' => t('Select a .h5p file to upload and create interactive content from.'),
    '#weight' => 2,
  );

  if (isset($node->json_content)) {
    $content = array(
      'id' => h5p_get_content_id($node),
      'title' => $node->title,
      'params' => $node->json_content,
      'language' => $node->language,
      'library' => $node->main_library,
      'embedType' => 'div',
    );
    $core = _h5p_get_instance('core');
    $filtered_params = $core->filterParameters($content);
  }
  else {
    $filtered_params = '{}';
  }

  $form['json_content'] = array(
    '#type' => 'hidden',
    '#default_value' => $filtered_params,
  );

  $form['main_library_id'] = array(
    '#type' => 'value',
    '#default_value' => isset($node->main_library_id) ? $node->main_library_id : '',
  );

  $form['embed_type'] = array(
    '#type' => 'value',
    '#default_value' => isset($node->embed_type) ? $node->embed_type : 'div',
  );

  // Display options
  if (variable_get('h5p_frame', TRUE)) {
    $form['h5p_options'] = array(
      '#type' => 'fieldset',
      '#title' => t('H5P Options'),
      '#collapsible' => true,
      '#collapsed' => true,
      '#weight' => $form['h5p']['#weight'] + 1,
      '#attributes' => array(
        'class' => 'h5p-action-bar-settings'
      ),
      '#after_build' => array('_h5p_load_disable_js')
    );

    if (!isset($node->disable)) {
      $node->disable = H5PCore::DISABLE_NONE;
    }

    $labels = _h5p_get_disable_labels();
    foreach (H5PCore::$disable as $bit => $name) {
      if (variable_get('h5p_' . ($bit & H5PCore::DISABLE_DOWNLOAD ? 'export' : $name), TRUE)) {
        $form['h5p_options'][$name] = array(
          '#type' => 'checkbox',
          '#title' => $labels[$bit],
          '#default_value' => !($node->disable & $bit)
        );
      }
    }

    $form['#submit'][] = '_h5p_form_submit';
  }

  return $form;
}

function _h5p_load_disable_js($form_element, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'h5p') . '/library/js/disable.js');
  return $form_element;
}

/**
 * Handle h5p node form submission
 */
function _h5p_form_submit($form, &$form_state) {
  $form_state['values']['disable'] = H5PCore::getDisable($form_state['values']);
}

/**
 * Provide human readable labels for display options.
 */
function _h5p_get_disable_labels() {
  return array(
    H5PCore::DISABLE_FRAME => t('Display action bar and frame'),
    H5PCore::DISABLE_DOWNLOAD => t('Download button'),
    H5PCore::DISABLE_EMBED => t('Embed button'),
    H5PCore::DISABLE_COPYRIGHT => t('Copyright button'),
    H5PCore::DISABLE_ABOUT => t('About H5P button')
  );
}

/**
 * Validate the h5p file
 */
function h5p_form_validate($form, &$form_state) {
  // Avoid blocking node deletion with missing files.
  if ($form_state['values']['op'] == t('Delete')) {
    return;
  }

  $validators = array(
    'file_validate_extensions' => array('h5p'),
  );
  // New uploads need to be saved in temp in order to be viewable
  // during node preview.
  $temporary_file_path = file_create_path(file_directory_path() . '/' . variable_get('h5p_default_path', 'h5p') . '/temp/' . uniqid('h5p-'));

  if ($file = file_save_upload('h5p', $validators, $temporary_file_path)) {
    // We're good to go.
    $form_state['values']['new_h5p'] = TRUE;
    $_SESSION['h5p_upload'] = $form_state['values']['h5p'] = $file->filepath;
    $_SESSION['h5p_upload_folder'] = $temporary_file_path;
  }
  elseif (!isset($form['#node']->nid) && empty($form_state['values']['h5p']) && empty($_SESSION['h5p_upload'])) {
    form_set_error('h5p', t('You must upload a h5p file.'));
  }
}

/**
 * Implements hook_validate().
 */
function h5p_validate($node, &$form) {
  if (isset($_SESSION['h5p_upload'])) {
    $h5p_validator = _h5p_get_instance('validator');
    $valid = $h5p_validator->isValidPackage();
    if (!$valid) {
      form_set_error('h5p', t('The uploaded file was not a valid H5P package'));
    }
  }
}

/**
 * Implements hook_insert().
 */
function h5p_insert($node) {
  if (isset($_SESSION['h5p_upload'])) {
    $h5p_core = _h5p_get_instance('storage');
    $h5p_core->savePackage(h5p_get_content_id($node), $node->nid);
  }
  else {
    $core = _h5p_get_instance('core');
    $core->saveContent(array(
      'id' => h5p_get_content_id($node),
      'params' => $node->json_content,
      'embed_type' => $node->embed_type,
      'library' => array(
        'libraryId' => $node->main_library_id
      ),
      'disable' => $node->disable
    ), $node->nid);
  }
}

/**
 * Implements hook_update().
 */
function h5p_update($node) {
  if ($node->revision && variable_get('h5p_revisioning', 1)) {
    // Create new revision
    $h5p_storage = _h5p_get_instance('storage');
    if (isset($_SESSION['h5p_upload'])) {
      // Use newly uploaded package
      $h5p_storage->savePackage($node->vid, $node->nid);
    }
    else {
      // Copy old package
      $h5p_storage->copyPackage($node->vid, $node->old_vid, $node->nid);
      // Insert content:
      h5p_insert($node);
    }
  }
  else {
    if (isset($_SESSION['h5p_upload'])) {
      // Replace old package
      $h5p_storage = _h5p_get_instance('storage');
      $h5p_storage->updatePackage(h5p_get_content_id($node), $node->nid);
    }
    else {
      h5p_insert($node);
    }
  }
}

/**
 * Implements hook_delete().
 */
function h5p_delete($node) {
  $h5p_core = _h5p_get_instance('storage');
  $h5p_export = _h5p_get_instance('export');

  $res = db_query("SELECT content_id FROM {h5p_nodes} WHERE nid = %d", $node->nid);
  while ($content_id = db_result($res)) {
    $h5p_core->deletePackage($content_id);
    $h5p_export->deleteExport($content_id);
  }
  db_query("DELETE FROM {h5p_points} where content_id = %d", h5p_get_content_id($node));
}

/**
 * Implements hook_load().
 */
function h5p_load($node) {
  $h5p = _h5p_get_instance('core');
  $content = $h5p->loadContent(h5p_get_content_id($node));

  $additions = new stdClass();
  if ($content !== NULL) {
    $additions->json_content = $content['params'];
    $additions->main_library_id = $content['library']['id'];
    $additions->embed_type = $content['embedType'];
    $additions->main_library = $content['library'];
    $node->disable = $content['disable'];
  }
  return $additions;
}

/**
 * Implements hook_view().
 */
function h5p_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);

  if (!isset($node->in_preview) && isset($node->main_library_id)) {
    $content_id = h5p_get_content_id($node);
    $embed = H5PCore::determineEmbedType($node->embed_type, $node->main_library['embedTypes']);

    h5p_add_files_and_settings($node, $embed);
    // TODO: Should we use Drupal's theme system?
    if ($embed === 'div') {
      $html = '<div class="h5p-content" data-content-id="' .  $content_id . '"></div>';
    }
    else {
      $html = '<div class="h5p-iframe-wrapper"><iframe id="h5p-iframe-' . $content_id . '" class="h5p-iframe" data-content-id="' . $content_id . '" style="height:1px" src="about:blank" frameBorder="0" scrolling="no"></iframe></div>';
    }
  }

  if (!isset($html)) {
    $html = '<div>' . t('Sorry, preview of H5P content is not yet available.') . '</div>';
  }
  else {
    h5p_set_started(h5p_get_content_id($node));
  }

  // Check if any unsupported libraries. Only users which may update this node will get the warning message
  if (node_access('update', $node)) {
    _h5p_display_unsupported_libraries();
  }

  $node->content['h5p'] = array(
    '#value' => $html,
    '#weight' => 1,
  );

  return $node;
}

/**
 * If unsupported libraries, display a message
 */
function _h5p_display_unsupported_libraries($display_details = FALSE) {
  // Check if any unsupported libraries. Only users which may update this node will get the warning message
  $unsupported_libraries = variable_get('h5p_unsupported_libraries', NULL);
  if ($unsupported_libraries !== NULL) {
    if ($display_details) {
      $core = _h5p_get_instance('core');
      $message = $core->createMarkupForUnsupportedLibraryList($unsupported_libraries);
    }
    else {
      // Important, in D6 % placeholders may not be used here since this function is called from hook_init
      // We're using @ instead
      // https://www.drupal.org/node/219910
      $message = t('You have <em>@num_libs</em> H5P libraries with versions not supported anymore. ', array('@num_libs' => sizeof($unsupported_libraries)));
    }

    $message .= t('Please upgrade all H5P libraries <a href="@url">here</a>', array('@url' => url('admin/content/h5p/libraries/upgrade-all')));

    drupal_set_message($message, 'warning', FALSE);
  }
}

/**
 * Implements hook_user_delete
 */
function h5p_user_delete($account) {
  db_query("DELETE FROM {h5p_points} WHERE uid = %d", $account->uid);
}

/**
 * Access callback for the setFinished feature
 */
function h5p_access_set_finished() {
  if (!isset($_POST['contentId'])) {
    return FALSE;
  }
  $nid = $_POST['contentId'];
  if (variable_get('h5p_revisioning', 1)) {
    $nid = db_result(db_query('SELECT nid FROM {node_revision} WHERE vid = %d', $nid));
  }
  return node_access('view', node_load((int) $nid));
}

/**
 * Set that the logged in user has started on an h5p
 *
 * @param int $content_id
 *  The id for the H5P content (vid or nid depending on setting)
 */
function h5p_set_started($content_id) {
  global $user;

  $count = db_result(db_query("SELECT COUNT(content_id) FROM {h5p_points} WHERE uid = %d AND content_id = %d", $user->uid, $content_id));
  if ($count == 0) {
    // INSERT
    db_query("INSERT INTO {h5p_points}(content_id, uid, started) values(%d, %d, %d)", $content_id, $user->uid, time());
  }
  else {
    // UPDATE
    db_query("UPDATE {h5p_points} SET started = %d WHERE content_id = %d and uid = %d", time(), $content_id, $user->uid);
  }
}

/**
 * Callback function for storing the users results in the database
 */
function h5p_set_finished() {
  global $user;
  $result = array('success' => FALSE);

  if ($user->uid && $_POST['contentId'] !== NULL && $_POST['points'] !== NULL && $_POST['maxPoints'] !== NULL) {
    db_query("UPDATE {h5p_points} SET finished = %d, points = %d, max_points = %d
      WHERE content_id = %d and uid = %d",
      time(), $_POST['points'], $_POST['maxPoints'], $_POST['contentId'], $user->uid
    );
    $result['success'] = TRUE;
  }

  echo json_encode($result);
}

/**
 * Adds content independent scripts, styles and settings
 *
 * @return array Assets.
 */
function h5p_add_core_assets() {
  static $assets;
  global $user;

  if ($assets === NULL) {
    $cache_buster = '?' . variable_get('css_js_query_string', '');
    $module_path = drupal_get_path('module', 'h5p');
    $assets = array(
      'css' => array(),
      'js' => array()
    );

    foreach (H5PCore::$styles as $style) {
      $css = $module_path . '/library/' . $style;
      drupal_add_css($css);
      $assets['css'][] = base_path() . $css . $cache_buster;
    }

    foreach (H5PCore::$scripts as $script) {
      $js = $module_path . '/library/' . $script;
      drupal_add_js($js);
      $assets['js'][] = base_path() . $js . $cache_buster;
    }
  }

  return $assets;
}

/**
 * Generates all the global settings for h5p content
 *
 * @return array
 */
function h5p_get_core_settings() {
  global $user, $base_url;

  $settings = array(
    'baseUrl' => $base_url,
    'url' => base_path() . _h5p_get_h5p_path(),
    'postUserStatistics' =>  $user->uid > 0,
    'ajaxPath' => url('h5p-ajax') . '/',
    'l10n' => array(
      'H5P' => array( // Could core provide this?
        'fullscreen' => t('Fullscreen'),
        'disableFullscreen' => t('Disable fullscreen'),
        'download' => t('Download'),
        'copyrights' => t('Rights of use'),
        'embed' => t('Embed'),
        'size' => t('Size'),
        'showAdvanced' => t('Show advanced'),
        'hideAdvanced' => t('Hide advanced'),
        'advancedHelp' => t('Include this script on your website if you want dynamic sizing of the embedded content:'),
        'copyrightInformation' => t('Rights of use'),
        'close' => t('Close'),
        'title' => t('Title'),
        'author' => t('Author'),
        'year' => t('Year'),
        'source' => t('Source'),
        'license' => t('License'),
        'thumbnail' => t('Thumbnail'),
        'noCopyrights' => t('No copyright information available for this content.'),
        'downloadDescription' => t('Download this content as a H5P file.'),
        'copyrightsDescription' => t('View copyright information for this content.'),
        'embedDescription' => t('View the embed code for this content.'),
        'h5pDescription' => t('Visit H5P.org to check out more cool content.')
      )
    )
  );

  if ($user->uid) {
    $settings['user'] = array(
      'name' => $user->name,
      'mail' => $user->mail
    );
  }

  return $settings;
}

/**
 * Generates a content object where all the content specific settings for
 * the h5p content is kept.
 *
 * @return array assoc
 */
function h5p_get_content($node) {
  return array(
    'id' => h5p_get_content_id($node),
    'mainId' => $node->nid,
    'title' => $node->title,
    'params' => $node->json_content,
    'language' => $node->language,
    'library' => $node->main_library,
    'embedType' => 'div',
    'filtered' => $node->filtered,
  );
}

/**
 * Generate h5p settings for the given content.
 *
 * @return array assoc
 */
function h5p_get_content_settings($content) {
  $core = _h5p_get_instance('core');
  $filtered = $core->filterParameters($content);

  // Allow other modules to alter the filtered parameters, but doesn't decode
  // the parameters unless it is needed.
  $modules = module_implements('h5p_filtered_params_alter');
  if (!empty($modules)) {
    $filtered = json_decode($filtered);
    foreach ($modules as $module) {
      $function = $module . '_h5p_filtered_params_alter';
      $function($filtered);
    }
    $filtered = json_encode($filtered);
  }

  return array(
    'library' => H5PCore::libraryToString($content['library']),
    'jsonContent' => $filtered,
    'fullScreen' => $content['library']['fullscreen'],
    'exportUrl' => h5p_get_export_path($content['id']),
    'embedCode' => '<iframe src="' . url('h5p/embed/' . $content['mainId'], array('absolute' => TRUE)) . '" width=":w" height=":h" frameborder="0" allowfullscreen="allowfullscreen"></iframe>',
    'resizeCode' => '<script src="' . h5p_get_resize_url() . '"></script>',
    'mainId' => $content['mainId']
  );
}

/**
 * Creates URL for the resizer script.
 *
 * @return string
 */
function h5p_get_resize_url() {
  return url(drupal_get_path('module', 'h5p') . '/library/js/h5p-resizer.js', array('absolute' => TRUE, 'language' => (object)array('language' => FALSE)));
}

/**
 * Adds h5p files and settings.
 *
 * @param stdClass $node
 * @param string $embed_type
 */
function h5p_add_files_and_settings($node, $embed_type) {
  static $integration, $added_js, $added_css;

  if ($node === NULL) {
    return $integration; // For printing
  }


  if (is_null($integration)) {
    // Add integration object
    $integration = h5p_get_core_settings();

    // Add core scripts and styles
    h5p_add_core_assets();
  }

  if (!isset($node->json_content) || !isset($node->nid)) {
    return; // Not content.
  }

  $content = h5p_get_content($node);
  if (isset($integration['contents'][$content['id']])) {
    return; // Already added.
  }

  $integration['contents']['cid-' . $content['id']] = h5p_get_content_settings($content);

  $core = _h5p_get_instance('core');
  $preloaded_dependencies = $core->loadContentDependencies($content['id'], 'preloaded');
  $files = $core->getDependenciesFiles($preloaded_dependencies, _h5p_get_h5p_path());
  $library_list = _h5p_dependencies_to_library_list($preloaded_dependencies);

  drupal_alter('h5p_scripts', $files['scripts'], $library_list, $embed_type);
  drupal_alter('h5p_styles', $files['styles'], $library_list, $embed_type);

  if ($embed_type === 'div') {
    foreach ($files['scripts'] as $script) {
      $url = base_path() . $script->path . $script->version;
      if (!isset($added_js[$url])) {
        drupal_add_js($script->path);
        $integration['loadedJs'] = $url;
        $added_js[$url] = TRUE;
      }
    }
    foreach ($files['styles'] as $style) {
      $url = base_path() . $style->path . $style->version;
      if (!isset($added_css[$url])) {
        drupal_add_css($style->path);
        $integration['loadedCss'][] = $url;
        $added_css[$url] = TRUE;
      }
    }
  }
  elseif ($embed_type === 'iframe') {
    h5p_add_iframe_assets($integration, $content['id'], $files);
  }
}

/**
 * Add the necessary assets for content to run in an iframe.
 *
 * @param array $integration
 * @param int $content_id
 * @param array $files
 */
function h5p_add_iframe_assets(&$integration, $content_id, $files) {
  static $core_added;

  if ($core_added === NULL) {
    $core_added = TRUE;
    $core_assets = h5p_add_core_assets();

    $integration['core']['scripts'] = $core_assets['js'];
    $integration['core']['styles'] = $core_assets['css'];
  }

  $preprocess_css = (variable_get('preprocess_css', FALSE) && (!defined('MAINTENANCE_MODE') || MAINTENANCE_MODE != 'update'));
  $preprocess_js = (variable_get('preprocess_js', FALSE) && (!defined('MAINTENANCE_MODE') || MAINTENANCE_MODE != 'update'));
  $directory = file_directory_path();
  $is_writable = is_dir($directory) && is_writable($directory) && (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PUBLIC);

  // Aggregate library styles and scripts for faster loading when using iframe.
  // Core files are not included to leverage browser caching! See http://css-tricks.com/one-two-three
  $core = _h5p_get_instance('core');

  $cache_file_prefix = $content_id . '-' . variable_get('css_js_query_string', '');

  if ($is_writable && $preprocess_css) {
    $filename = $cache_file_prefix . '.css';
    // Refactor styles array to Drupal eatable format.
    $styles = array('module' => array());
    foreach ($files['styles'] as $style) {
      $styles['module'][$style->path] = TRUE;
    }

    $integration['contents']['cid-' . $content_id]['styles'] = array(drupal_build_css_cache($styles, $filename));
  }
  else {
    $integration['contents']['cid-' . $content_id]['styles'] = $core->getAssetsUrls($files['styles']);
  }

  if ($is_writable && $preprocess_js) {
    $filename = $cache_file_prefix . '.js';

    // Refactor scripts array to Drupal eatable format.
    $scripts = array();
    foreach ($files['scripts'] as $script) {
      $scripts[$script->path] = array(
        'preprocess' => TRUE,
      );
    }
    $integration['contents']['cid-' . $content_id]['scripts'] = array(drupal_build_js_cache($scripts, $filename));
  }
  else {
    $integration['contents']['cid-' . $content_id]['scripts'] = $core->getAssetsUrls($files['scripts']);
  }
}

/**
 * Verify that the libraries H5P needs exists
 *
 * @return boolean
 *  TRUE if the settings validate, FALSE otherwise
 */
function _h5p_check_settings() {
  // File paths
  $path = file_create_path(file_directory_path() . '/' . variable_get('h5p_default_path', 'h5p'));

  // Creating directories - the first empty string is for creating the parent H5P directory
  foreach (array('', 'temp', 'libraries', 'content', 'exports', 'development') as $directory) {
    $directory = $path . '/' . $directory;
    if (file_check_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS) === FALSE) {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Deletes old session variables that aren't valid anymore
 *
 * We don't want to keep any session variables around if this
 * is a new form...
 */
function _h5p_maintain_session_variables() {
  if (!$_POST && !empty($_SESSION['h5p_upload'])) {
    unset($_SESSION['h5p_upload'], $_SESSION['h5p_upload_folder']);
  }
}

/**
 * Get an instance of one of the h5p library classes
 *
 * This function stores the h5p core in a static variable so that the variables there will
 * be kept between validating and saving the node for instance
 *
 * @staticvar H5PDrupal $interface
 *  The interface between the H5P library and drupal
 * @staticvar H5PCore $core
 *  Core functions and storage in the h5p library
 * @param string $type
 *  Specifies the instance to be returned; validator, storage, interface or core
 * @return object
 *  The instance og h5p specified by type
 */
function _h5p_get_instance($type) {
  static $interface, $core;
  global $language;

  if (!isset($interface)) {
    // We've started to use autoload without enforcing it, so we still need to require the files
    // TODO: Enforce autoload through hook_update_N and remove the code below. Remember to clear cache as well
    $H5P_path = './' . drupal_get_path('module', 'h5p');
    require_once $H5P_path . "/library/h5p.classes.php";
    require_once $H5P_path . "/library/h5p-development.class.php";
    require_once $H5P_path . "/h5p.classes.inc";

    $interface = new H5PDrupal();

    $development_mode = H5PDevelopment::MODE_NONE;
    if (variable_get('h5p_content_dev_mode', '0') === 1) {
      $development_mode |= H5PDevelopment::MODE_CONTENT;
      drupal_set_message(t('H5P content development mode is enabled. Change <a href="@settings-page">settings</a>.', array('@settings-page' => url('admin/settings/h5p'))), 'warning', FALSE);
    }
    if (variable_get('h5p_library_development', 0) === 1) {
      $development_mode |= H5PDevelopment::MODE_LIBRARY;
      $preprocess_css_or_js = variable_get('preprocess_css', 0) === '1' || variable_get('preprocess_js', 0) === '1';

      $message = t('H5P library development directory is enabled. Change <a href="@settings-page">settings</a>.', array('@settings-page' => url('admin/settings/h5p')));

      if ($preprocess_css_or_js) {
        $message .= '<br/>' . t('Preprocessing of css and/or js files is enabled. This is not supported when using the development directory option. Please disable preprocessing, and clear the cache');
      }

      drupal_set_message($message, 'warning', FALSE);
    }

    $core = new H5PCore($interface, _h5p_get_h5p_path(), base_path(), $language->language, (variable_get('h5p_export', '1') ? TRUE : FALSE), $development_mode);
  }

  switch ($type) {
    case 'validator':
      return new H5PValidator($interface, $core);
    case 'storage':
      return new H5PStorage($interface, $core);
    case 'contentvalidator':
      return new H5PContentValidator($interface, $core);
    case 'export':
      return new H5PExport($interface, $core);
    case 'interface':
      return $interface;
    case 'core':
      return $core;
  }
}

/**
 * Get the path to the h5p files folder.
 *
 * @return string
 *  Path to the h5p files folder
 */
function _h5p_get_h5p_path() {
  return file_directory_path() . '/' . variable_get('h5p_default_path', 'h5p');
}

/**
 * The h5p module supports disabling revisioning of the h5p files and database entries.
 * This means that all revisions of a h5p node will belong to the newest files and
 * entries in the database. This is done to make it easier to sync h5p nodes between
 * servers(a client needs this), and it also saves disk space.
 *
 * A side effect of this is a very strange database schema, and some strange code here and
 * there.
 *
 * @param object $node
 *  The node we will extract the content id from
 * @return int
 *  The nodes vid if we're supporting revisioning. The nodes nid if we aren't
 */
function h5p_get_content_id($node) {
  return variable_get('h5p_revisioning', 1) ? $node->vid : $node->nid;
}

/**
 * Implementation of hook_content_extra_fields().
 */
function h5p_content_extra_fields($type_name) {
  $extra = array();
  if ($type_name == 'h5p_content') {
    $extra['h5p'] = array(
      'label' => t('H5P Upload'),
      'description' => t('Upload interactive content.'),
      'weight' => 2,
    );
    $extra['h5p_options'] = array(
      'label' => t('H5P Options'),
      'description' => t('Display options for interactive content.'),
      'weight' => 3,
    );
  }
  return $extra;
}

/**
 * Handler for the custom node points access check
 *
 * @param stdObject $account
 */
function h5p_access_node_points($account = NULL) {
  global $user;

  if (user_access('access all h5p results')) {
    return TRUE;
  }

  // menu_get_object isn't working, so we load it manually...
  if (arg(0) === 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    if ($node !== FALSE && $node->type == 'h5p_content') {
      if (user_access('access h5p results for own content') && $user->uid === $node->uid) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Handler for the custom user points access check
 *
 * @param stdObject $account
 */
function h5p_access_user_points($account = NULL) {
  global $user;

  if (user_access('access all h5p results')) {
    return TRUE;
  }

  // menu_get_object isn't working, so we load it manually...
  if (arg(0) === 'user' && is_numeric(arg(1))) {
    $accessed_user = user_load(arg(1));
    if ($accessed_user !== FALSE) {
      if (user_access('access own h5p results') && $user->uid === $accessed_user->uid) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_cron().
 */
function h5p_cron() {
  // Contact the mothership for updates
  _h5p_fetch_library_updates();
}

/**
 * Looks for library updates
 */
function _h5p_fetch_library_updates($disable = FALSE) {
  $time = time();
  if (variable_get('h5p_allow_communication_with_h5p_org', TRUE) &&
      ($disable ||
       intval(variable_get('h5p_fetched_library_metadata_on', 0)) + 86400 < $time)) {

    // Fetch the library-metadata:
    $core = _h5p_get_instance('core');
    $core->fetchLibrariesMetadata($disable);

    // Log when the last updates were fetched
    variable_set('h5p_fetched_library_metadata_on', $time);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function h5p_preprocess_page(&$variables) {
  $integration = h5p_add_files_and_settings(NULL, NULL);
  if ($integration) {
    $js = 'H5PIntegration = ' . json_encode($integration) . ';';
    $variables['scripts'] .= '<script type="text/javascript">' . $js . '</script>';
    drupal_add_js($js , 'inline');
  }
}

/**
 * Get a list of libraries more suitable for inspection than the dependencies list
 *
 * @param array $dependencies
 *  List of dependencies on the format returned from H5P core
 * @return array
 *  List of libraries indexed by machineName and with objects as values with
 *  major and minor versions as properties.
 */
function _h5p_dependencies_to_library_list($dependencies) {
  $library_list = array();
  foreach ($dependencies as $dependency) {
    $library_list[$dependency['machineName']] = array(
      'majorVersion' => $dependency['majorVersion'],
      'minorVersion' => $dependency['minorVersion'],
    );
  }
  return $library_list;
}
