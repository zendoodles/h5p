<?php

/**
 * @file
 *  h5p.module php file
 *  Drupal module h5p. A HTML5 Package manager for Drupal.
 */

/**
 * Implementation of hook_autoload_info().
 */
function h5p_autoload_info() {
  return array(
    'H5PDrupal' => array(
      'file' => 'h5p.classes.inc',
    ),
    'H5PCore' => array(
      'file' => 'library/h5p.classes.php',
    ),
    'H5PFrameworkInterface' => array(
      'file' => 'library/h5p.classes.php',
    ),
    'H5PStorage' => array(
      'file' => 'library/h5p.classes.php',
    ),
    'H5PValidator' => array(
      'file' => 'library/h5p.classes.php',
    ),
    'H5PDevelopment' => array(
      'file' => 'library/h5p-development.class.php',
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function h5p_menu() {
  $items = array();
  $items['admin/settings/h5p'] = array(
    'title' => 'H5P',
    'description' => 'Configure the location of h5p files.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('h5p_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'h5p.admin.inc',
  );
  $items['admin/content/h5p/libraries'] = array(
      'title' => 'H5P libraries',
      'description' => 'List, delete and get detailed info on the installed H5P libraries',
      'page callback' => 'h5p_library_list',
      'access arguments' => array('administer site configuration'), 
      'type' => MENU_NORMAL_ITEM,
      'file' => 'h5p.admin.inc',
  );
  $items['admin/content/h5p/libraries/%'] = array(
      'title' => 'H5P library details',
      'title callback' => '_h5p_library_details_title',
      'title arguments' => array(4),
      'description' => 'Get detailedÂ info on a library',
      'page callback' => 'h5p_library_details',
      'page arguments' => array(4),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'h5p.admin.inc',
  );
  $items['admin/content/h5p/libraries/%/delete'] = array(
      'title' => 'Delete H5P library',      
      'description' => 'Delete an unused H5P library',
      'page callback' => 'h5p_library_delete',
      'page arguments' => array(4),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'h5p.admin.inc',
  );
  $items['h5p/embed/%node'] = array(
    'title' => 'H5P Embed Data',
    'page callback' => 'h5p_embed',
    'page arguments' => array(2),
    'access callback' => 'node_access',
    'access arguments' => array('view', 2),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Make URLs absolute.
 *
 * @param array $urls
 * @param array $remove Optional urls to skip.
 * @return array absolute urls.
 */
function _h5p_make_urls_absolute($urls, $remove = array()) {
  global $base_url;
  for ($i = 0, $s = count($urls); $i < $s; $i++) {
    if (in_array($urls[$i], $remove)) {
      array_splice($urls, $i, 1);
      $i--;
      $s--;
      continue;
    }

    $urls[$i] =  $base_url . '/' . $urls[$i];
  }
  return $urls;
}

/**
 * Embed data.
 *
 * Caching this in DB probably won't have much to say? Since the 
 * node needs to be loaded first. Varnish or other page cache
 * will work much better.
 *
 * Embed code example: 
 * <script src="//127.0.0.1/sites/all/modules/h5p/library/js/h5p-embed.js" data-h5p="//127.0.0.1/h5p/embed/1" async></script>
 */
function h5p_embed($node) {
  global $base_url;
  $callback = filter_input(INPUT_GET, 'callback');
  
  if ($callback === NULL) {
    drupal_not_found();
    module_invoke_all('exit');
    exit();
  }
  
  $id = h5p_get_content_id($node);
  $h5p = _h5p_get_instance('core');
  $settings = array();

  $core = _h5p_get_instance('core');  
  $preloaded_dependencies = $core->loadContentDependencies($id, 'preloaded');
  $files = $core->getDependenciesFiles($preloaded_dependencies);
  h5p_add_iframe_assets($settings, $id, $files, 'h5p-' . $node->nid . '-' . $node->vid);
  
  if (variable_get('h5p_export', 1)) {
    $e = _h5p_get_instance('export');
    $h5p_path = $base_url . '/' . $e->getExportPath($id, $node->title, $node->language);
  }
  
  $content = array(
    'id' => intval($id),
    'path' => $base_url . '/' . _h5p_get_h5p_path() . '/',
    'library' => $node->main_library['name'] . ' ' . $node->main_library['majorVersion'] . '.' . $node->main_library['minorVersion'],
    'fullscreen' => intval($node->main_library['fullscreen']),
    'export' => (isset($h5p_path) ? $h5p_path : ''),
    'embedCode' => _h5p_generate_embed_code($node->nid),
    'styles' => _h5p_make_urls_absolute(array_merge($settings['h5p']['core']['styles'], $settings['h5p']['cid-' . $id]['styles'])),
    'scripts' => _h5p_make_urls_absolute(array_merge($settings['h5p']['core']['scripts'], $settings['h5p']['cid-' . $id]['scripts']), array(drupal_get_path('module', 'h5p') . '/js/h5pintegration.js')),
    'params' => h5p_filter_json_content($node),
    'i18n' => array(
      'H5P' => array(
        'fullscreen' => t('Fullscreen'),
        'download' => t('Download H5P'),
        'copyrights' => t('Rights of use'),
        'embed' => t('Embed'),
        'copyrightInformation' => t('Rights of use'),
        'close' => t('Close'),
        'title' => t('Title'),
        'author' => t('Author'),
        'year' => t('Year'),
        'source' => t('Source'),
        'license' => t('License'),
        'thumbnail' => t('Thumbnail'),
        'noCopyrights' => t('No copyright information available for this content.'),
        'downloadDescription' => t('Download this content as a H5P file.'),
        'copyrightsDescription' => t('View copyright information for this content.'),
        'embedDescription' => t('View the embed code for this content.'),
        'h5pDescription' => t('Visit H5P.org to check out more cool content.'),
      ),
    ),
  );
  
  print $callback . '(' . json_encode($content) . ');';
}

/**
 * Generate embed code for a given node
 * 
 * @param integer $nid
 * @return string
 */
function _h5p_generate_embed_code($nid) {
  global $base_url;
  $module_path = drupal_get_path('module', 'h5p');
  $embed_js_url = $base_url . '/' . $module_path . '/library/js/h5p-embed.js';
  $data_url = url('h5p/embed/' . $nid, array('absolute' => TRUE));
  
  return '<script src="' . $embed_js_url .'" data-h5p="' . $data_url . '" async></script>';
}

/**
 * Creates the title for the library details page 
 * 
 * @param integer $library_id
 */
function _h5p_library_details_title($library_id) {
  return db_result(db_query('SELECT title FROM {h5p_libraries} where library_id = %d', $library_id));
}

/**
 * Implementation of hook_node_info().
 */
function h5p_node_info() {
  return array(
    'h5p_content' => array(
      'name' => t('Interactive content'),
      'module' => 'h5p',
      'description' => 'Create interactive HTML5 content using H5P.',
    )
  );
}

/**
 * Implementation of hook_perm().
 */
function h5p_perm() {
  return array('create h5p', 'edit own h5p', 'edit any h5p', 'delete own h5p', 'delete any h5p', 'update h5p libraries');
}

/**
 * Implementation of hook_access().
 */
function h5p_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      if (user_access('create h5p', $account)) {
        return TRUE;
      }
      break;

    case 'update':
      if (user_access('edit any h5p', $account) || ($account->uid == $node->uid && user_access('edit own h5p', $account))) {
        return TRUE;
      }
      break;

    case 'delete':
      if (user_access('delete any h5p', $account) || ($account->uid == $node->uid && user_access('delete own h5p', $account))) {
        return TRUE;
      }
      break;
  }
}

/**
 * Implementation of hook_form().
 */
function h5p_form(&$node, $form_state) {
  _h5p_check_settings();

  _h5p_maintain_session_variables();

  $type = node_get_types('type', $node);

  $form['#validate'][] = 'h5p_form_validate';

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
  );

  $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);

  $form['#attributes'] = array('enctype' => "multipart/form-data");

  $form['h5p'] = array(
    '#type' => 'file',
    '#title' => t('HTML 5 Package'),
    '#description' => t('Select a .h5p file to upload and create interactive content from.'),
    '#weight' => 2,
  );

  $form['json_content'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($node->json_content) ? $node->json_content : ''
  );

  $form['main_library_id'] = array(
    '#type' => 'value',
    '#default_value' => isset($node->main_library_id) ? $node->main_library_id : ''
  );

  $form['embed_type'] = array(
    '#type' => 'value',
    '#default_value' => isset($node->embed_type) ? $node->embed_type : 'div'
  );

  return $form;
}

/**
 * Validate the h5p file
 */
function h5p_form_validate($form, &$form_state) {
  // Avoid blocking node deletion with missing files.
  if ($form_state['values']['op'] == t('Delete')) {
    return;
  }

  $validators = array(
    "file_validate_extensions" => array('h5p'),
  );
  // New uploads need to be saved in temp in order to be viewable
  // during node preview.
  $temporary_file_path = file_create_path(file_directory_path() . '/' . variable_get('h5p_default_path', 'h5p') . '/temp/' . uniqid('h5p-'));
  if ($file = file_save_upload('h5p', $validators, $temporary_file_path)) {
    // We're good to go.
    $form_state['values']['new_h5p'] = TRUE;
    $_SESSION['h5p_upload'] = $form_state['values']['h5p'] = $file->filepath;
    $_SESSION['h5p_upload_folder'] = $temporary_file_path;
  }
  elseif (!isset($form['#node']->nid) && empty($form_state['values']['h5p']) && empty($_SESSION['h5p_upload'])) {
    form_set_error('h5p', t('You must upload a h5p file.'));
  }
}

/**
 * Implementation of hook_validate().
 */
function h5p_validate($node, &$form) {
  if (isset($_SESSION['h5p_upload'])) {
    $h5p_validator = _h5p_get_instance('validator');
    $valid = $h5p_validator->isValidPackage();
    if (!$valid) {
      form_set_error('h5p', t('The uploaded file was not a valid h5p package'));
    }
  }
}

/**
 * Implementation of hook_insert().
 */
function h5p_insert($node) {
  if (isset($_SESSION['h5p_upload'])) {
    $h5p_core = _h5p_get_instance('storage');
    $h5p_core->savePackage(h5p_get_content_id($node), $node->nid);
    
    // TODO: Consider only running if a library has been updated or content dependencies has changed.
    _h5p_clear_js_and_css_cache();
  }
  else {
    db_query(
      "INSERT INTO {h5p_nodes}
      (content_id, nid, json_content, embed_type, main_library_id)
      VALUES (%d, %d, '%s', '%s', %d)", h5p_get_content_id($node), $node->nid, $node->json_content, $node->embed_type, $node->main_library_id
    );
  }
}

/**
 * Implementation of hook_update().
 */
function h5p_update($node) {
  $content_id = h5p_get_content_id($node);

  if (isset($_SESSION['h5p_upload'])) {
    if ($node->revision && variable_get('h5p_revisioning', 1)) {
      h5p_insert($node);
    }
    else {
      $h5p_core = _h5p_get_instance('storage');
      $h5p_core->updatePackage($content_id, $node->nid);

      // TODO: Consider only running if a library has been updated or content dependencies has changed.
      _h5p_clear_js_and_css_cache();
    }
  }
  elseif ($node->revision && variable_get('h5p_revisioning', 1)) {
    $h5p_core = _h5p_get_instance('storage');
    $h5p_core->copyPackage($node->vid, $node->old_vid, $node->nid);
    h5p_insert($node);
  }
  else {
    // Make sure a row exists before we try updating it.
    $content_id = db_result(db_query("SELECT content_id FROM {h5p_nodes} WHERE content_id = %d", $content_id));
    
    if ($content_id !== FALSE) {
      db_query(
        "UPDATE {h5p_nodes}
        SET json_content = '%s', embed_type = '%s', main_library_id = '%d'
        WHERE content_id = %d", $node->json_content, $node->embed_type, $node->main_library_id, $content_id
      );
    }
    else {
      // No rows, insert new row. (this happens if the module is reinstalled)
      h5p_insert($node);
    }
    
    // TODO: Consider only running if a library has been updated or content dependencies has changed.
    _h5p_clear_js_and_css_cache();
  }

  // TODO: Consider creating the .h5p for export here, or use rewrite like image cacheing 
  // in Drupal 7. This way we can prevent broken links if somebody links directly to the .h5p file.
  // Also we won't have to check if the file exists all the time.

  $export = _h5p_get_instance('export');
  $export->deleteExport($content_id);
}

/**
 * Implementation of hook_delete().
 */
function h5p_delete($node) {
  $h5p_core = _h5p_get_instance('storage');

  $res = db_query("SELECT content_id FROM {h5p_nodes} WHERE nid = %d", $node->nid);
  while ($content_id = db_result($res)) {
    $h5p_core->deletePackage($content_id);
  }
  
  $export = _h5p_get_instance('export');
  $export->deleteExport($content_id);
}

/**
 * Implementation of hook_load().
 */
function h5p_load($node) {
  $h5p = _h5p_get_instance('core');
  $content = $h5p->loadContent(h5p_get_content_id($node));

  $additions = new stdClass();  
  if ($content !== NULL) {
    $additions->json_content = $content['params'];
    $additions->main_library_id = $content['library']['id'];
    $additions->embed_type = $content['embedType'];
    $additions->main_library = $content['library'];
  }
  return $additions;
}

/**
 * Implementation of hook_view().
 */
function h5p_view($node, $teaser = FALSE, $page = FALSE) {  
  $node = node_prepare($node, $teaser);

  if (!isset($node->in_preview) && isset($node->main_library_id)) {
    $content_id = h5p_get_content_id($node);
    $embed = H5PCore::determineEmbedType($node->embed_type, $node->main_library['embedTypes']);
    
    h5p_add_files_and_settings($node, $embed);
    // TODO: Should we use Drupal's theme system?
    if ($embed === 'div') {
      $html = '<div class="h5p-content" data-content-id="' .  $content_id . '"></div>';
    }
    else {
      $html = '<div class="h5p-iframe-wrapper"><iframe id="h5p-iframe-' . $content_id . '" class="h5p-iframe" data-content-id="' . $content_id . '" style="height:1px" src="about:blank" frameBorder="0" scrolling="no"></iframe></div>';
    }
  }

  if (!isset($html)) {
    $html = '<div>' . t('Sorry, preview of H5P content is not yet available.') . '</div>';
  }
  else {
    //h5p_set_started(h5p_get_content_id($node));
  }

  $node->content['h5p'] = array(
    '#value' => $html,
    '#weight' => 1,
  );

  return $node;
}

/**
 * Adds content independent scripts, styles and settings
 *
 * @returns array Assets.
 */
function h5p_add_core_assets() {
  static $assets;
  
  if ($assets === NULL) {
    $cache_buster = '?' . variable_get('css_js_query_string', '');
    $module_path = drupal_get_path('module', 'h5p');
    $assets = array(
      'css' => array(),
      'js' => array()
    );
    
    foreach (H5PCore::$styles as $style) {
      $css = $module_path . '/library/' . $style;
      drupal_add_css($css);
      $assets['css'][] = $css . $cache_buster; ; 
    }
    
    $js = $module_path . '/js/h5pintegration.js';
    drupal_add_js($js);
    $assets['js'][] = $js;
    foreach (H5PCore::$scripts as $script) {
      $js = $module_path . '/library/' . $script;
      drupal_add_js($js);
      $assets['js'][] = $js . $cache_buster; ;
    }
    
    $H5pI = _h5p_get_instance('interface');
    drupal_add_js(array(
      'h5p' => array(
        'contentPath' => base_path() . _h5p_get_h5p_path() . '/content/',
        'exportEnabled' => (bool) variable_get('h5p_export', 1),
        'h5pIconInActionBar' => variable_get('h5p_icon_in_action_bar', '1') == 1,
        'libraryPath' => _h5p_get_h5p_path() . '/libraries/',
      )
    ), 'setting');
  }
    
  return $assets;
}

/**
 * Adds h5p files and settings.
 *
 * @param stdClass $node
 */
function h5p_add_files_and_settings($node, $embed_type) {
  static $added_content, $added_js, $added_css;
  
  h5p_add_core_assets();
  
  if (!isset($node->json_content) || !isset($node->nid)) {
    return; // Not content.
  }
  
  $content_id = h5p_get_content_id($node);
  if (isset($added_content[$content_id])) {
    return; // Already added.
  }
  $added_content[$content_id] = TRUE;
    
  $h5p_params = h5p_filter_json_content($node);

  if (variable_get('h5p_export', 1)) {
    $e = _h5p_get_instance('export');
    $h5p_path = base_path() . $e->getExportPath(array(
      'id' => $content_id,
      'title' => $node->title,
      'params' => $node->json_content,
      'language' => $node->language,
      'library' => $node->main_library,
      'embedType' => 'div',
    ));
  }

  $settings = array(
    'h5p' => array(
      'content' => array(
        "cid-$content_id" => array(
          'library' => $node->main_library['name'] . ' ' . $node->main_library['majorVersion'] . '.' . $node->main_library['minorVersion'],
          'jsonContent' => $h5p_params,
          'fullScreen' => $node->main_library['fullscreen'],
          'export' => (isset($h5p_path) ? $h5p_path : ''),
          'embedCode' => _h5p_generate_embed_code($node->nid)
        )
      )
    )
  );

  $core = _h5p_get_instance('core');
  $preloaded_dependencies = $core->loadContentDependencies($content_id, 'preloaded');
  $files = $core->getDependenciesFiles($preloaded_dependencies);
  
  if ($embed_type === 'div') {
    foreach ($files['scripts'] as $script) {
      $url = $script->path . $script->version;
      if (!isset($added_js[$url])) {
        drupal_add_js($script->path);
        $settings['h5p']['loadedJs'][] = $url;
        $added_js[$url] = TRUE;
      }
    }
    foreach ($files['styles'] as $style) {
      $url = $style->path . $style->version;
      if (!isset($added_css[$url])) {
        drupal_add_css($style->path);
        $settings['h5p']['loadedCss'][] = $url;
        $added_css[$url] = TRUE;
      }
    }
  }
  elseif ($embed_type === 'iframe') {
    h5p_add_iframe_assets($settings, $content_id, $files, 'h5p-' . $node->nid . '-' . $node->vid);
  }

  drupal_add_js($settings, 'setting');
}

/**
 * Add the necessary assets for content to run in an iframe.
 *
 * @param array $settings 
 * @param int $content_id
 * @param array $files
 * @param string $cache_file_prefix
 */
function h5p_add_iframe_assets(&$settings, $content_id, $files, $cache_file_prefix) {
  static $core_added;
  
  if ($core_added === NULL) {
    $core_added = TRUE;
    $core_assets = h5p_add_core_assets();
  
    $settings['h5p']['core']['scripts'] = $core_assets['js'];
    $settings['h5p']['core']['styles'] = $core_assets['css'];
  }

  $preprocess_css = (variable_get('preprocess_css', FALSE) && (!defined('MAINTENANCE_MODE') || MAINTENANCE_MODE != 'update'));
  $preprocess_js = (variable_get('preprocess_js', FALSE) && (!defined('MAINTENANCE_MODE') || MAINTENANCE_MODE != 'update'));
  $directory = file_directory_path();
  $is_writable = is_dir($directory) && is_writable($directory) && (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PUBLIC);

  // Aggregate library styles and scripts for faster loading when using iframe. 
  // Core files are not included to leverage browser caching! See http://css-tricks.com/one-two-three
  $core = _h5p_get_instance('core');
  
  if ($is_writable && $preprocess_css) {
    $filename = $cache_file_prefix . '.css';
    
    // Refactor styles array to Drupal eatable format.
    $styles = array('module' => array());
    foreach ($files['styles'] as $style) {
      $styles['module'][$style->path] = TRUE;
    }
    
    $settings['h5p']['cid-' . $content_id]['styles'] = array(drupal_build_css_cache($styles, $filename));
  }
  else {
    $settings['h5p']['cid-' . $content_id]['styles'] = $core->getAssetsUrls($files['styles']);
  }
  
  if ($is_writable && $preprocess_js) {
    $filename = $cache_file_prefix . '.js';
    
    // Refactor scripts array to Drupal eatable format.
    $scripts = array();
    foreach ($files['scripts'] as $script) {
      $scripts[$script->path] = array(
        'preprocess' => TRUE,
      );
    }
    $settings['h5p']['cid-' . $content_id]['scripts'] = array(drupal_build_js_cache($scripts, $filename));
  }
  else {
    $settings['h5p']['cid-' . $content_id]['scripts'] = $core->getAssetsUrls($files['scripts']);
  }
}

/**
 * Get filtered json content for node.
 *
 * @param $node
 *  Node object to filter json
 * @return string
 *  Returns the filtered JSON string.
 */
function h5p_filter_json_content($node) {
  if (isset($node->vid)) {
    $cid = 'validated_json_' . $node->vid;
    $cache = cache_get($cid);
    if (isset($cache->data) && !variable_get('h5p_content_dev_mode', 0) && !variable_get('h5p_library_development', 0)) {
      return $cache->data;
    }
  }
  
  // Get params as object
  $params = json_decode($node->json_content);

  $h5p = _h5p_get_instance('core');
  // Get semantics.
  $semantics = $h5p->loadLibrarySemantics($node->main_library['name'], $node->main_library['majorVersion'], $node->main_library['minorVersion']);
  
  $validator = _h5p_get_instance('contentvalidator');
  // Validate and filter against main library semantics.
  $validator->validateBySemantics($params, $semantics);

  $params = json_encode($params);

  if (isset($cid)) {
    // Cache results
    cache_set($cid, $params);
  }
  
  return $params;
}

/**
 * Verify the h5p settings.
 *
 * @return boolean
 *  TRUE if the settings validate, FALSE otherwise
 */
function _h5p_check_settings() {
  // File paths
  $path = file_create_path(file_directory_path() . '/' . variable_get('h5p_default_path', 'h5p'));
  
  // Creating directories - the first empty string is for creating the parent H5P directory
  foreach (array('', 'temp', 'libraries', 'content', 'exports', 'development') as $directory) {
    $directory = $path . '/' . $directory;
    if (file_check_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS) === FALSE) {
      return FALSE;
    }
  }
  
  return TRUE;
}

/**
 * Deletes old session variables that aren't valid anymore
 *
 * We don't want to keep any session variables around if this
 * is a new form...
 */
function _h5p_maintain_session_variables() {
  if (!$_POST && !empty($_SESSION['h5p_upload'])) {
    unset($_SESSION['h5p_upload'], $_SESSION['h5p_upload_folder']);
  }
}

/**
 * Get an instance of one of the h5p library classes
 *
 * This function stores the h5p core in a static variable so that the variables there will
 * be kept between validating and saving the node for instance
 *
 * @staticvar H5PDrupal $interface
 *  The interface between the H5P library and drupal
 * @staticvar H5PCore $core
 *  Core functions and storage in the h5p library
 * @param string $type
 *  Specifies the instance to be returned; validator, storage, interface or core
 * @return object
 *  The instance og h5p specified by type
 */
function _h5p_get_instance($type) {
  static $interface, $core;
  global $language;

  if (!isset($interface)) {
    // We've started to use autoload without enforcing it, so we still need to require the files
    // TODO: Enforce autoload through hook_update_N and remove the code below. Remember to clear cache as well
    $H5P_path = './' . drupal_get_path('module', 'h5p');
    require_once $H5P_path . "/library/h5p.classes.php";
    require_once $H5P_path . "/library/h5p-development.class.php";
    require_once $H5P_path . "/h5p.classes.inc";
    
    $interface = new H5PDrupal();

    $development_mode = H5PDevelopment::MODE_NONE;
    if (variable_get('h5p_content_dev_mode', '0') === 1) {
      $development_mode |= H5PDevelopment::MODE_CONTENT;
      drupal_set_message(t('H5P content development mode is enabled. Change <a href="@settings-page">settings</a>.', array('@settings-page' => url('admin/settings/h5p'))), 'warning', FALSE);
    }
    if (variable_get('h5p_library_development', 0) === 1) {
      $development_mode |= H5PDevelopment::MODE_LIBRARY;
      $preprocess_css_or_js = variable_get('preprocess_css', 0) === '1' || variable_get('preprocess_js', 0) === '1';
      
      $message = t('H5P library development directory is enabled. Change <a href="@settings-page">settings</a>.', array('@settings-page' => url('admin/settings/h5p')));
      
      if ($preprocess_css_or_js) {
        $message .= '<br/>' . t('Preprocessing of css and/or js files is enabled. This is not supported when using the development directory option. Please disable preprocessing, and clear the cache');
      }
      
      drupal_set_message($message, 'warning', FALSE);
    }
    
    $core = new H5PCore($interface, _h5p_get_h5p_path(), $language->language, $development_mode);
  }

  switch ($type) {
    case 'validator':
      return new H5PValidator($interface, $core);
    case 'storage':
      return new H5PStorage($interface, $core);
    case 'contentvalidator':
      return new H5PContentValidator($interface, $core);
    case 'export':
      return new H5PExport($interface, $core);
    case 'interface':
      return $interface; 
      // TODO: Consider if we really should let Drupal talk directly to the interface,
      // going through core makes it easier to add new stuff later.
    case 'core':
      return $core;
  }
}

/**
 * Get the path to the h5p files folder
 *
 * @return string
 *  Path to the h5p files folder
 */
function _h5p_get_h5p_path() {
  return file_directory_path() . '/' . variable_get('h5p_default_path', 'h5p');
}

/**
 * Clears the js and css cache. Needed when updating and
 * adding libraries
 */
function _h5p_clear_js_and_css_cache() {
  // Clear caches to make sure new versions are used.
  _drupal_flush_css_js();
  drupal_clear_js_cache();
  drupal_clear_css_cache();

  // Need to clear JSON content cache too.
  cache_clear_all('validated_json_', 'cache', TRUE);
}

/**
 * The h5p module supports disabling revisioning of the h5p files and database entries.
 * This means that all revisions of a h5p node will belong to the newest files and
 * entries in the database. This is done to make it easier to sync h5p nodes between
 * servers(a client needs this), and it also saves disk space.
 *
 * A side effect of this is a very strange database schema, and some strange code here and
 * there.
 *
 * @param object $node
 *  The node we will extract the content id from
 * @return int
 *  The nodes vid if we're supporting revisioning. The nodes nid if we aren't
 */
function h5p_get_content_id($node) {
  return variable_get('h5p_revisioning', 1) ? $node->vid : $node->nid;
}

/**
 * Implementation of hook_content_extra_fields().
 */
function h5p_content_extra_fields($type_name) {
  $extra = array();
  if ($type_name == 'h5p_content') {
    $extra['h5p'] = array(
      'label' => t('H5P Upload'),
      'description' => t('Upload interactive content.'),
      'weight' => 2,
    );
  }
  return $extra;
}


/**
 * 
 */
function h5p_library_delete_form(&$form_state, $library_id, $library_name) {
  
  $form['library_id'] = array(
      '#type' => 'hidden',
      '#value' => $library_id
  );
  
  $form['info'] = array(
    '#type' => 'markup',
    '#value' => '<span>' . t('Are you sure you would like to delete the @library_name H5P library?', array('@library_name' => $library_name)) . '</span>'
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Delete')
  );
  
  return $form;
}

/**
 * 
 */
function h5p_library_delete_form_submit($form, &$form_state) {
  // Do the actual deletion:
  _h5p_get_instance('interface')->deleteLibrary($form_state['values']['library_id']);
}
