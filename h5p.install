<?php

/**
 * @file
 *  h5p.install php file
 *  Install and upgrade instructions for the h5p Drupal module.
 */

/**
 * Implements hook_install().
 */
function h5p_install() {
  drupal_install_schema('h5p');
}

/**
 * Implements hook_uninstall().
 */
function h5p_uninstall() {
  drupal_uninstall_schema('h5p');

  variable_del('h5p_frame');
  variable_del('h5p_export');
  variable_del('h5p_embed');
  variable_del('h5p_copyright');
  variable_del('h5p_icon_in_action_bar');
  variable_del('h5p_revisioning');
  variable_del('h5p_content_dev_mode');
  variable_del('h5p_default_path');
  variable_del('h5p_dev_mode');
  variable_del('h5p_library_development');
  variable_del('h5p_library_whitelist_extras');
  variable_del('h5p_whitelist');
  variable_del('h5p_allow_communication_with_h5p_org');
  variable_del('h5p_fetched_library_metadata_on');
  variable_del('h5p_first_runnable_saved');
}

/**
 * Implementation of hook_schema().
 */
function h5p_schema() {
  $schema['h5p_nodes_libraries'] = array(
    'description' => 'Stores information about what h5p uses what libraries.',
    'fields' => array(
      'content_id' => array(
        'description' => 'Primary Key: The unique identifier for a node(vid by default).',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'library_id' => array(
        'description' => 'The identifier of a h5p library this content uses.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'dependency_type' => array(
        'description' => "dynamic, preloaded or editor",
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'preloaded',
      ),
      'drop_css' => array(
        'description' => '1 if the preloaded css from the dependency is to be excluded.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'weight' => array(
        'description' => 'Determines the order in which the preloaded libraries will be loaded',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 999999,
      ),
    ),
    'primary key' => array('content_id', 'library_id', 'dependency_type'),
  );

  $schema['h5p_libraries'] = array(
    'description' => 'Stores information about what h5p uses what libraries.',
    'fields' => array(
      'library_id' => array(
        'description' => 'Primary Key: The id of the library.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'machine_name' => array(
        'description' => 'The library machine name',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The human readable name of this library',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'major_version' => array(
        'description' => 'The version of this library',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'minor_version' => array(
        'description' => 'The minor version of this library',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'patch_version' => array(
        'description' => 'The patch version of this library',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'runnable' => array(
        'description' => 'Whether or not this library is executable.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'fullscreen' => array(
        'description' => 'Indicates if this library can be opened in fullscreen.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'embed_types' => array(
        'description' => 'The allowed embed types for this library as a comma separated list',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'preloaded_js' => array(
        'description' => 'The preloaded js for this library as a comma separated list',
        'type' => 'text',
      ),
      'preloaded_css' => array(
        'description' => 'The preloaded css for this library as a comma separated list',
        'type' => 'text',
      ),
      'drop_library_css' => array( // TODO: This really needs to be move to h5p_libraries_libraries.
        'description' => 'List of libraries that should not have CSS included if this library is used. Comma separated list.',
        'type' => 'text',
      ),
      'semantics' => array(
        'description' => 'The semantics definition in json format',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'tutorial_url' => array(
        'type' => 'varchar',
        'length' => 2047
      ),
    ),
    'primary key' => array('library_id'),
  );

  $schema['h5p_libraries_libraries'] = array(
    'description' => 'Stores information about library dependencies.',
    'fields' => array(
      'library_id' => array(
        'description' => 'Primary Key: The id of a h5p library.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'required_library_id' => array(
        'description' => 'Primary Key: The id of a h5p library.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'dependency_type' => array(
        'description' => 'preloaded, dynamic, or editor',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('library_id', 'required_library_id'),
  );

  $schema['h5p_libraries_languages'] = array(
    'description' => 'Stores translations for the languages.',
    'fields' => array(
      'library_id' => array(
        'description' => 'Primary Key: The id of a h5p library.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'language_code' => array(
        'description' => 'Primary Key: The language code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'language_json' => array(
        'description' => 'The translations defined in json format',
        'type' => 'text',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('library_id', 'language_code'),
  );

  $schema['h5p_nodes'] = array(
    'description' => 'Stores information about where the h5p content is stored.',
    'fields' => array(
      'content_id' => array(
        'description' => 'Primary Key: The unique identifier for this node(vid by default).',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => 'The {node}.nid of the h5p node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'json_content' => array(
        'description' => 'The content in json format',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'embed_type' => array(
        'description' => 'The embed type for this content',
        'type' => 'varchar',
        'length' => 127,
        'not null' => TRUE,
        'default' => '',
      ),
      'disable' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'main_library_id' => array(
        'description' => 'The library we first instanciate for this node',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'content_type' => array(
        'description' => 'Content type as defined in h5p.json',
        'type' => 'varchar',
        'length' => 127,
      ),
      'author' => array(
        'description' => 'Author as defined in h5p.json',
        'type' => 'varchar',
        'length' => 127,
      ),
      'license' => array(
        'description' => 'License as defined in h5p.json',
        'type' => 'varchar',
        'length' => 7,
      ),
      'meta_keywords' => array(
        'description' => 'Keywords as defined in h5p.json',
        'type' => 'text',
      ),
      'meta_description' => array(
        'description' => 'Meta description as defined in h5p.json',
        'type' => 'text',
      ),
      'filtered' => array(
        'description' => 'Keeps track of the filtered content parameters.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
        'default' => ''
      ),
      'slug' => array(
        'description' => 'Human readable content identifier that is unique',
        'type' => 'varchar',
        'length' => 127,
        'not null' => TRUE,
        'default' => ''
      )
    ),
    'primary key' => array('content_id'),
  );

  $schema['h5p_points'] = array(
    'description' => 'Stores user statistics.',
    'fields' => array(
      'content_id' => array(
        'description' => 'Primary Key: The unique identifier for this node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'Primary Key: The id for the user answering this H5P.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'started' => array(
        'description' => 'When the user started on the interaction',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'finished' => array(
        'description' => 'When the user submitted the result',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'points' => array(
        'description' => 'The users score',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'max_points' => array(
        'description' => 'The maximum score for this test',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('content_id', 'uid'),
  );

  $schema['h5p_content_user_data'] = array(
    'description' => 'Stores user data about the content',
    'fields' => array(
      'user_id' => array(
        'description' => 'The user identifier',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'content_main_id' => array(
        'description' => 'The main identifier for the h5p content',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'sub_content_id' => array(
        'description' => 'The sub identifier for the h5p content',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'data_id' => array(
        'description' => 'The data type identifier',
        'type' => 'varchar',
        'length' => 127,
      ),
      'timestamp' => array(
        'description' => 'What the time is',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'data' => array(
        'description' => 'Contains the data saved',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'preloaded' => array(
        'description' => 'Indicates if the is to be preloaded',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'delete_on_content_change' => array(
        'description' => 'Indicates if the data is to be deleted when the content gets updated',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('user_id', 'content_main_id', 'sub_content_id', 'data_id'),
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function h5p_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    // TODO: Add check for zip library
    // File paths
    $h5p_path = file_create_path(file_directory_path() . '/' . variable_get('h5p_default_path', 'h5p'));
    $temp_path = $h5p_path . '/temp';
    $export_path = $h5p_path . '/exports';
    if (!file_check_directory($h5p_path, FILE_CREATE_DIRECTORY)) {
      $requirements['h5p_dirs'] = array(
        'value' => t('Missing directory.'),
        'severity' => REQUIREMENT_ERROR,
        'description' => t("The h5p module's package directory %h5p_path is missing.", array('%h5p_path' => $h5p_path)),
      );
    }
    else if (!file_check_directory($temp_path, FILE_CREATE_DIRECTORY)) {
      $requirements['h5p_dirs'] = array(
        'value' => t('Missing temp directory.'),
        'severity' => REQUIREMENT_ERROR,
        'description' => t("The h5p module's temp directory %temp_path is missing.", array('%temp_path' => $temp_path)),
      );
    }
    else if (!file_check_directory($export_path, FILE_CREATE_DIRECTORY)) {
      $requirements['h5p_dirs'] = array(
        'value' => t('Missing export directory.'),
        'severity' => REQUIREMENT_ERROR,
        'description' => t("The h5p module's export directory %export_path is missing.", array('%export_path' => $export_path)),
      );
    }
    else {
      $requirements['h5p_dirs'] = array(
        'value' => t('Exists (%path).', array('%path' => $h5p_path)),
        'severity' => REQUIREMENT_OK,
      );
    }
    $requirements['h5p_dirs']['title'] = t('h5p module directories');
  }

  return $requirements;
}

/**
 * Implementation of hook_update_N().
 */
function h5p_update_6100() {
  $ret = array();
  db_add_field($ret, 'h5p_libraries', 'fullscreen', array(
    'description' => 'Indicates if this library can be opened in fullscreen.',
    'type' => 'int',
    'size' => 'tiny',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ));
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function h5p_update_6101() {
  $ret = array();
  db_create_table($ret, 'h5p_libraries_languages', array(
    'description' => 'Stores translations for the languages.',
    'fields' => array(
      'library_id' => array(
        'description' => 'Primary Key: The id of a h5p library.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'language_code' => array(
        'description' => 'Primary Key: The language code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'language_json' => array(
        'description' => 'The translations defined in json format',
        'type' => 'text',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('library_id', 'language_code'),
  ));
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function h5p_update_6102() {
  $ret = array();
  db_add_field($ret, 'h5p_nodes', 'content_type', array(
    'description' => 'Content type as defined in h5p.json',
    'type' => 'varchar',
    'length' => 127,
  ));
  db_add_field($ret, 'h5p_nodes', 'author', array(
    'description' => 'Author as defined in h5p.json',
    'type' => 'varchar',
    'length' => 127,
  ));
  db_add_field($ret, 'h5p_nodes', 'license', array(
    'description' => 'License as defined in h5p.json',
    'type' => 'varchar',
    'length' => 7,
  ));
  db_add_field($ret, 'h5p_nodes', 'meta_keywords', array(
    'description' => 'Keywords as defined in h5p.json',
    'type' => 'text',
  ));
  db_add_field($ret, 'h5p_nodes', 'meta_description', array(
    'description' => 'Meta description as defined in h5p.json',
    'type' => 'text',
  ));

  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function h5p_update_6103() {
  $ret = array();
  db_change_field($ret, 'h5p_nodes', 'json_content', 'json_content', array(
    'description' => 'The content in json format',
    'type' => 'text',
    'not null' => TRUE,
    'size' => 'big',
  ));
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function h5p_update_6104() {
  $ret = array();
  db_add_index($ret, 'files', 'filepath', array('filepath'));
  return $ret;
}

/**
 * Implementation of hook_update_N().
 *
 * Renames the h5p_nodes_libraries.preloaded field to dependency_type,
 * and converts it to contain an integer.
 *
 * Updates h5p_nodes_libraries to get all dependencies.
 */
function h5p_update_6105(&$sandbox) {
  $ret = array();

  if (isset($sandbox['content']) === FALSE) {

    if (db_column_exists('h5p_nodes_libraries', 'preloaded')) {
      db_drop_primary_key($ret, 'h5p_nodes_libraries');
      db_change_field($ret, 'h5p_nodes_libraries', 'preloaded', 'dependency_type', array(
        'description' => "dynamic, preloaded or editor",
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'preloaded',
      ), array(
        'primary key' => array('content_id', 'library_id', 'dependency_type')
      ));

      $result = end($ret);
      if ($result['success'] === FALSE) {
        return $ret; // Do not update nodes if update failed.
      }
    }

    // Update h5p_nodes_libraries to get all dependencies.
    $result = db_query("
      SELECT hn.content_id AS id,
             hl.machine_name AS libraryName,
             hl.major_version AS libraryMajorVersion,
             hl.minor_version AS libraryMinorVersion
      FROM {h5p_nodes} hn
      JOIN {h5p_libraries} hl ON hl.library_id = hn.main_library_id
    ");

    // Update h5p_nodes_libraries since column has changed type
    db_query("UPDATE {h5p_nodes_libraries} set dependency_type='preloaded' where dependency_type='1'");
    db_query("UPDATE {h5p_nodes_libraries} set dependency_type='dynamic' where dependency_type='0'");

    $sandbox['content'] = array();
    while ($content = db_fetch_object($result)) {
      $sandbox['content'][] = $content;
    }

    $sandbox['current'] = 0;
    $sandbox['max'] = count($sandbox['content']);
  }

  if ($sandbox['max'] === 0) {
    $ret['#finished'] = 1;
  }
  else {
    h5p_save_content_dependencies($sandbox['content'][$sandbox['current']]);
    $sandbox['current']++;
    $ret['#finished'] = ($sandbox['current'] / $sandbox['max']);
  }

  return $ret;
}


/**
 * Implementation of hook_update_N().
 *
 * - Adds H5P points table
 * - Validates library support
 */
function h5p_update_6106() {
  $ret = array();

  db_create_table($ret, 'h5p_points', array(
    'description' => 'Stores user statistics.',
    'fields' => array(
      'content_id' => array(
        'description' => 'Primary Key: The unique identifier for this node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'Primary Key: The id for the user answering this H5P.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'started' => array(
        'description' => 'When the user started on the interaction',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'finished' => array(
        'description' => 'When the user submitted the result',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'points' => array(
        'description' => 'The users score',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'max_points' => array(
        'description' => 'The maximum score for this test',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('content_id', 'uid'),
  ));

  h5p_validate_library_support();

  return $ret;
}

/**
 * Check if any library installed is unsupported by core
 */
function h5p_validate_library_support() {
  $core = _h5p_get_instance('core');
  // Force check
  $core->validateLibrarySupport(TRUE);
}

/**
 * (re)Save all dependencies for given content.
 * This will given content nodes a relation to all libraries used by it's main library.
 *
 * @param object $content
 */
function h5p_save_content_dependencies($content) {
  $i = _h5p_get_instance('interface');
  $core = _h5p_get_instance('core');

  $library = $i->loadLibrary($content->libraryName, $content->libraryMajorVersion, $content->libraryMinorVersion);

  $dependencies = array();
  $core->findLibraryDependencies($dependencies, $library);

  $dropLibraryCssList = array();
  foreach ($dependencies as $dependency) {
    if (!empty($dependency['library']['dropLibraryCss'])) {
      $dropLibraryCssList = array_merge($dropLibraryCssList, explode(', ', $dependency['library']['dropLibraryCss']));
    }
  }

  foreach ($dependencies as $dependency) {
    $dropCss = in_array($dependency['library']['machineName'], $dropLibraryCssList) ? 1 : 0;
    db_query(
        "INSERT INTO {h5p_nodes_libraries}
          (content_id, library_id, dependency_type, drop_css)
          VALUES (%d, %d, '%s', %d)
          ON DUPLICATE KEY UPDATE drop_css = %d",
        $content->id, $dependency['library']['libraryId'], $dependency['type'], $dropCss, $dropCss
    );
  }
}

/**
 * Implementation of hook_update_N().
 *
 * Add DB field to keep track of filtered parameters for H5P content.
 */
function h5p_update_6107() {
  $ret = array();

  db_add_field($ret, 'h5p_nodes', 'filtered', array(
    'description' => 'Keeps track of the filtered content parameters.',
    'type' => 'text',
    'not null' => TRUE,
    'size' => 'big',
    'default' => ''
  ));

  return $ret;
}

/**
 * Implementation of hook_update_N().
 *
 * Add field to keep track of disabled display options.
 * Add field for tutorial url.
 */
function h5p_update_6108() {
  $ret = array();

  if (!db_column_exists('h5p_nodes', 'disable')) {
    db_add_field($ret, 'h5p_nodes', 'disable', array(
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0
    ));
  }
  if (!db_column_exists('h5p_libraries', 'tutorial_url')) {
    db_add_field($ret, 'h5p_libraries', 'tutorial_url', array(
      'type' => 'varchar',
      'length' => 2047
    ));
  }

  return $ret;
}

/**
 * Implementation of hook_update_N().
 *
 * Add field to keep track of dependency weight
 */
function h5p_update_6109() {
  $ret = array();

  if (!db_column_exists('h5p_nodes_libraries', 'weight')) {
    db_add_field($ret, 'h5p_nodes_libraries', 'weight', array(
      'description' => 'Determines the order in which the preloaded libraries will be loaded',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 999999,
    ));
  }

  return $ret;
}

/**
 * Implementation of hook_update_N().
 *
 * Adds a table for storing user data for each interactive content.
 */
function h5p_update_6110() {
  $ret = array();

  $schema = h5p_schema();
  if (!db_table_exists('h5p_content_user_data')) {
    db_create_table($ret, 'h5p_content_user_data', $schema['h5p_content_user_data']);
  }

  return $ret;
}


/**
 * Implementation of hook_update_N().
 *
 * Add unique human readable content identifier. Useful for creating human
 * readable filenames, URLs and SEO.
 */
function h5p_update_6111() {
  $ret = array();

  if (!db_column_exists('h5p_nodes', 'slug')) {
    db_add_field($ret, 'h5p_nodes', 'slug', array(
      'description' => 'Human readable content identifier that is unique',
      'type' => 'varchar',
      'length' => 127,
      'not null' => TRUE,
      'default' => ''
    ));
  }

  // Store if or not we have runnable libraries
  if (db_result(db_query("SELECT 1 FROM {h5p_libraries} WHERE runnable = 1"))) {
    variable_set('h5p_first_runnable_saved', 1);
  }

  return $ret;
}
